// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FBUnitCharacter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FBUnitCharacter GetRootAsFBUnitCharacter(ByteBuffer _bb) { return GetRootAsFBUnitCharacter(_bb, new FBUnitCharacter()); }
  public static FBUnitCharacter GetRootAsFBUnitCharacter(ByteBuffer _bb, FBUnitCharacter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBUnitCharacter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Idx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Attack { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Prefab { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabArray() { return __p.__vector_as_array<byte>(10); }
  public sbyte Grade { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<FlatBufferData.FBUnitCharacter> CreateFBUnitCharacter(FlatBufferBuilder builder,
      int Idx = 0,
      StringOffset NameOffset = default(StringOffset),
      int Attack = 0,
      StringOffset PrefabOffset = default(StringOffset),
      sbyte Grade = 0) {
    builder.StartTable(5);
    FBUnitCharacter.AddPrefab(builder, PrefabOffset);
    FBUnitCharacter.AddAttack(builder, Attack);
    FBUnitCharacter.AddName(builder, NameOffset);
    FBUnitCharacter.AddIdx(builder, Idx);
    FBUnitCharacter.AddGrade(builder, Grade);
    return FBUnitCharacter.EndFBUnitCharacter(builder);
  }

  public static void StartFBUnitCharacter(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddIdx(FlatBufferBuilder builder, int idx) { builder.AddInt(0, idx, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddAttack(FlatBufferBuilder builder, int attack) { builder.AddInt(2, attack, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset prefabOffset) { builder.AddOffset(3, prefabOffset.Value, 0); }
  public static void AddGrade(FlatBufferBuilder builder, sbyte grade) { builder.AddSbyte(4, grade, 0); }
  public static Offset<FlatBufferData.FBUnitCharacter> EndFBUnitCharacter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferData.FBUnitCharacter>(o);
  }
}


static public class FBUnitCharacterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Idx*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Attack*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Prefab*/, false)
      && verifier.VerifyField(tablePos, 12 /*Grade*/, 1 /*sbyte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
