// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBufferData
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct FBUnitMonster : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static FBUnitMonster GetRootAsFBUnitMonster(ByteBuffer _bb) { return GetRootAsFBUnitMonster(_bb, new FBUnitMonster()); }
  public static FBUnitMonster GetRootAsFBUnitMonster(ByteBuffer _bb, FBUnitMonster obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBUnitMonster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Idx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public float Speed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string Prefab { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<FlatBufferData.FBUnitMonster> CreateFBUnitMonster(FlatBufferBuilder builder,
      int Idx = 0,
      StringOffset NameOffset = default(StringOffset),
      float Speed = 0.0f,
      StringOffset PrefabOffset = default(StringOffset)) {
    builder.StartTable(4);
    FBUnitMonster.AddPrefab(builder, PrefabOffset);
    FBUnitMonster.AddSpeed(builder, Speed);
    FBUnitMonster.AddName(builder, NameOffset);
    FBUnitMonster.AddIdx(builder, Idx);
    return FBUnitMonster.EndFBUnitMonster(builder);
  }

  public static void StartFBUnitMonster(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddIdx(FlatBufferBuilder builder, int idx) { builder.AddInt(0, idx, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, float speed) { builder.AddFloat(2, speed, 0.0f); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset prefabOffset) { builder.AddOffset(3, prefabOffset.Value, 0); }
  public static Offset<FlatBufferData.FBUnitMonster> EndFBUnitMonster(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlatBufferData.FBUnitMonster>(o);
  }
}


static public class FBUnitMonsterVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Idx*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Speed*/, 4 /*float*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Prefab*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
